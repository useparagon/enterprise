apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "prometheus.fullname" . }}
  labels:
    {{- include "prometheus.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "prometheus.selectorLabels" . | nindent 6 }}
  serviceName: {{ include "prometheus.fullname" . }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "prometheus.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "prometheus.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            # Environment variable to let prometheus know we're running in k8s and that k8s service discovery
            # should be enabled
            - name: PLATFORM
              value: k8s
            {{- $globalEnv := .Values.global.env -}}
            {{- $overrideEnv := .Values.env -}}
            {{- range $key := .Values.envKeys }}
            {{- if hasKey $overrideEnv $key }}
            - name: {{ $key }}
              value: {{ get $overrideEnv $key | quote }}
            {{- else if hasKey $globalEnv $key }}
            - name: {{ $key }}
              value: {{ get $globalEnv $key | quote }}
            {{- end -}}
            {{- end }}
          volumeMounts:
            - name: prometheus
              mountPath: /usr/src/app/data
          livenessProbe:
            httpGet:
              path: "/-/healthy"
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: "/-/ready"
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: prometheus
      spec:
        resources:
          requests:
            storage: 20Gi
        accessModes:
          - ReadWriteOnce
